"use strict";(self.webpackChunkcreate_project_docs=self.webpackChunkcreate_project_docs||[]).push([[3579],{4529:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>l,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var s=n(74848),a=n(28453);const i={sidebar_position:5},o="Use-case descriptions",r={id:"requirements/use-case-descriptions",title:"Use-case descriptions",description:"Use Case 1: Player Joining The Game",source:"@site/docs/requirements/use-case-descriptions.md",sourceDirName:"requirements",slug:"/requirements/use-case-descriptions",permalink:"/applebaum-final-projects-mafia-uhh/docs/requirements/use-case-descriptions",draft:!1,unlisted:!1,editUrl:"https://github.com/cis3296f24/applebaum-final-projects-mafia-uhh/edit/main/documentation/docs/requirements/use-case-descriptions.md",tags:[],version:"current",lastUpdatedBy:"tuo62395",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docsSidebar",previous:{title:"Features and Requirements",permalink:"/applebaum-final-projects-mafia-uhh/docs/requirements/features-and-requirements"},next:{title:"System Architecture",permalink:"/applebaum-final-projects-mafia-uhh/docs/category/system-architecture"}},c={},d=[{value:"Use Case 1: Player Joining The Game",id:"use-case-1-player-joining-the-game",level:2},{value:"Use Case 2: Host Changing Options in Host Panel",id:"use-case-2-host-changing-options-in-host-panel",level:2},{value:"Use Case 3: Player Selecting a Vote",id:"use-case-3-player-selecting-a-vote",level:2},{value:"Use Case 4: Player Clicks Help Button",id:"use-case-4-player-clicks-help-button",level:2}];function h(e){const t={h1:"h1",h2:"h2",mermaid:"mermaid",p:"p",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"use-case-descriptions",children:"Use-case descriptions"}),"\n",(0,s.jsx)(t.h2,{id:"use-case-1-player-joining-the-game",children:"Use Case 1: Player Joining The Game"}),"\n",(0,s.jsx)(t.mermaid,{value:"\nsequenceDiagram\n    actor User\n    participant websocket\n    participant Frontend Game.js\n    participant Backend index.js\n    \n    activate Frontend Game.js\n    User ->> websocket: connects\n    activate websocket\n    User ->> Frontend Game.js: input name\n    User ->> Frontend Game.js: press join button\n    Frontend Game.js ->> websocket: player name and JSON join message\n    websocket ->> Backend index.js: player name and JSON join message\n    activate Backend index.js\n    Backend index.js ->> websocket: JSON player message\n    deactivate Backend index.js\n    websocket ->> Frontend Game.js: JSON player message\n    deactivate websocket\n    deactivate Frontend Game.js"}),"\n",(0,s.jsx)(t.p,{children:"This sequence diagram shows a player joining the game. First the user will open the website and that will make a websocket connection. Then the User will input their name and press the join button on the frontend client screen Game.js. The Frontend Game.js sends this information to the websocket connection and then the websocket will send that information to the backend index.js. The Backend index.js will send the player message to the websocket connection, which will then send it to the Frontend Game.js where it will be displayed on the client."}),"\n",(0,s.jsx)(t.h2,{id:"use-case-2-host-changing-options-in-host-panel",children:"Use Case 2: Host Changing Options in Host Panel"}),"\n",(0,s.jsx)(t.mermaid,{value:"\nsequenceDiagram\n    actor Host User\n    participant websocket\n    participant Frontend Game.js\n    participant Backend index.js\n    \n    activate Frontend Game.js\n    \n    Host User ->> websocket: Open website and connects\n    activate websocket\n    \n    Host User ->> Frontend Game.js: input name\n    Host User ->> Frontend Game.js: press join button\n    Frontend Game.js ->> websocket: player name and JSON join message\n    websocket ->> Backend index.js: player name and JSON join message\n    activate Backend index.js\n    Backend index.js ->> websocket: JSON host message\n    deactivate Backend index.js\n    websocket ->> Frontend Game.js: JSON host message\n    Frontend Game.js ->> Frontend Game.js: display host UI\n    deactivate websocket\n    deactivate Frontend Game.js\n    Host User ->> Frontend Game.js: change max players to 6, number of mafia to 2\n    Host User ->> Frontend Game.js: press start game button\n    activate Frontend Game.js\n    Frontend Game.js ->> websocket: start JSON with maxPlayers, numMafia\n    websocket ->> Backend index.js: start JSON with maxPlayers, numMafia\n    activate Backend index.js\n    Backend index.js ->> Backend index.js: assignRoles()\n    Backend index.js ->> websocket: role JSON\n    deactivate Backend index.js\n    websocket ->> Frontend Game.js: role JSON\n    deactivate Frontend Game.js\n"}),"\n",(0,s.jsx)(t.p,{children:"This sequence diagram is for the use case of the Host, or the first person to connect to the game, changing options in the host options panel. The host user opens the website and connects to the websocket. The host enters their name and presses join, which causes the frontend to send a join message containing the player name to the backend. Since this is the first user to join, they are made the host. The backend sends a host message to the frontend via the websocket, which then triggers the frontend to display the host UI for the host only. Then the host changes max players to 6 and number of mafia to 2. Once they start the game, a start message is sent via websocket to the backend, where these variables are used to assignRoles() to all players. Using the websocket, the backend sends a role message to the frontend to display the role that each player got."}),"\n",(0,s.jsx)(t.h2,{id:"use-case-3-player-selecting-a-vote",children:"Use Case 3: Player Selecting a Vote"}),"\n",(0,s.jsx)(t.mermaid,{value:"\nsequenceDiagram\n    actor User\n    participant websocket\n    participant Night.js\n    participant index.js\n    \n    %% index.js = Backend, & Night.js = Frontend & websocket = communication pipe between both\n    activate Night.js\n    activate websocket\n\n    %% the current moment is immediately after game status swapped from startGame.js\n    %% User is already connected to the websocket\n\n    %% Game has transitioned to Night.js, voting is isn't initialized but the timer is\n    activate Night.js\n    Night.js ->> websocket: sends 'startVote' from frontend\n    deactivate Night.js\n    \n    Note right of Night.js: NIGHT.JS:<br>- Voting not initiated<br>- Timer started\n    websocket ->> index.js: passes 'startVote' to backend\n    \n    activate index.js\n    Note right of index.js: INDEX.JS:<br>- Processes 'startVote'<br>- Prepares \"players\" map\n    index.js ->> websocket: sends 'startVoting' with the parameter players map\n    deactivate index.js\n    \n    Note left of index.js:  NIGHT.JS:<br>- Voting phase initialized<br>- Sends active player list\n    websocket ->> Night.js: passes 'startVoting' and parameter\n    \n    activate Night.js\n    Note right of Night.js: NIGHT.JS:<br>- Updates Voting state<br>- `setVoting(true)`<br>- `useState(players)`<br>- Reset votes\n    %% User voting interaction\n    User ->> Night.js: clicks player name to vote (voteForPlayer)\n    Note right of Night.js: NIGHT.JS:<br>- User vote submitted<br>- Processing voteForPlayer\n    Night.js ->> websocket: sends 'vote' tag with name of voted player\n    deactivate Night.js\n    \n    websocket ->> index.js: passes 'vote' with playerName\n    \n    activate index.js\n    Note right of index.js: INDEX.JS:<br>- Initiates handleVoting<br>- `handleVoting` checks vote count<br>- Tie \u2192 'voteTie'<br>- Winner \u2192 'voteResults'\n    %% Outcome: winner in votes\n    Note right of index.js: - Player eliminated<br>- player.eliminated = true<br>- Results are universally broadcasted\n    index.js ->> websocket: sends 'voteResults' with eliminatedPlayer name & team\n    deactivate index.js\n    \n    websocket ->> Night.js: passes 'voteResults' with eliminatedPlayer\n    \n    activate Night.js\n    Note right of Night.js: NIGHT.JS:<br>- updates eliminatedPlayers <br>- turns off voting & timer <br>- resets votes\n    deactivate Night.js\n\n    deactivate websocket"}),"\n",(0,s.jsx)(t.p,{children:"This sequence diagram represents a player who is already in the game and can vote. The user is already has a websocket connection. The current state of the game is immediately after game status swapped from startGame.js to Night.js. The diagram demonstates the various communications between the frontend and backend of the game system through a websocket. At first, the voting is not started, but then the game updates to have voting begin (through various communications between backend and frontend to setup the initialization of voting). Following this, the User will be able to select the name of their target vote for elimination by clicking on their button on the frontend client screen of Night.js. The frontend will communicate their choice to the backend who will process it. The backend then sends the reponse to the voting results from all other users to each individual users frontend. The player has the name of the eliminated player displayed on their screen and finally voting and the timer are reset back to their initial states."}),"\n",(0,s.jsx)(t.h2,{id:"use-case-4-player-clicks-help-button",children:"Use Case 4: Player Clicks Help Button"}),"\n",(0,s.jsx)(t.mermaid,{value:"\nsequenceDiagram\n    actor User\n    participant Index.js\n    participant WebSocket\n    participant Game.js\n\n    Index.js->>WebSocket: Send roles list (ws.send(JSON.stringify({ type: 'rolesList', roleDesc })))\n    WebSocket->>Game.js: Receive roles list (type: 'rolesList', roleDesc)\n    Game.js->>Game.js: Store roles list in state\n\n    User->>Game.js: Clicks \"Help\" Button (toggleHelp)\n    Game.js->>Game.js: Show HelpPopUp (setShowHelp(true))\n    Game.js->>User: Display help content (role descriptions)\n\n    User->>Game.js: Clicks \"X\" to close HelpPopUp\n    Game.js->>Game.js: Hide HelpPopUp (setShowHelp(false))\n    Game.js->>User: Close help content (role descriptions)\n\n"}),"\n",(0,s.jsx)(t.p,{children:'The process starts when index.js sends the roles list (with role descriptions) to Game.js using a WebSocket. Game.js receives this list and saves it in its state. When the User clicks the "Help" button, Game.js shows the HelpPopUp, which pulls the role descriptions from the saved list to display helpful info to the player. If the User decides they don\u2019t need the help anymore, they can click the "X" button to close the pop-up. This triggers Game.js to hide the pop-up and return the player to the main game screen. It\u2019s a simple back-and-forth between index.js and Game.js, with the User interacting with the help content as needed.'})]})}function l(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>r});var s=n(96540);const a={},i=s.createContext(a);function o(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);